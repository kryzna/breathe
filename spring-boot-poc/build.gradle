buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'



jar {
	baseName = 'demo'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
//	compile('org.springframework.boot:spring-boot-starter-aop')
//	compile('org.springframework.boot:spring-boot-starter-cache')
//	compile('org.springframework.cloud:spring-cloud-starter-aws')
//	compile('org.springframework.boot:spring-boot-starter-cloud-connectors')
//	compile('org.springframework.cloud:spring-cloud-starter')
//	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-freemarker')
	compile('org.springframework.boot:spring-boot-starter-mobile')
//	compile('org.springframework.boot:spring-boot-starter-security')
//	compile('org.springframework.boot:spring-boot-starter-social-facebook')
	compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    runtime('mysql:mysql-connector-java')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("junit:junit")
}

dependencyManagement {
	imports { 
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RC1" 
	}
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}

test {
	testLogging.showStandardStreams = true
// listen to events in the test execution lifecycle
   beforeTest { descriptor ->
      logger.lifecycle("Running test: $descriptor")
   }

   // listen to standard out and standard error of the test JVM(s)
   onOutput { descriptor, event ->
      logger.lifecycle("Test: $descriptor, $event.message")
   }
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.*


docker {
    url = 'https://192.168.99.100:2376'
    certPath = new File('C:/Users/krish.seetharaman/.docker/machine/machines/default')
}

task dockerfolder {
    doLast {
        mkdir('build/docker')
    }
}
task buildImage(type: DockerBuildImage, dependsOn: [dockerfolder, build]) {
    doFirst {
        copy {
          from '/src/main/docker/Dockerfile'
          into 'build/docker'
        }

      copy {
        from jar
        into 'build/docker'
      }
    }

    inputDir = project.file('build/docker')
    tag = 'edifecs/springbootpoc:latest'
}
task stopAndRemoveContainer(type: Exec) {

    group = 'Docker'

      commandLine 'cmd', '/c', "docker rm -f $project.name"

      standardOutput = new ByteArrayOutputStream()

      ext.output = {
        return standardOutput.toString()
      }

   // targetContainerId { createMyAppContainer.getContainerId() }
}
task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    containerName = project.name
    portBindings = ['8080:8080']
}



task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task stopContainer(type: Exec) {

    group = 'Docker'

      commandLine 'cmd', '/c', "docker stop $project.name"

      standardOutput = new ByteArrayOutputStream()

      ext.output = {
        return standardOutput.toString()
      }

   // targetContainerId { createMyAppContainer.getContainerId() }
}
