apply plugin: 'com.android.application'

group 'com.edifecs.cdm'
version '1.0-SNAPSHOT'

project.ext.appName = 'Breathe'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.rgp.breathe"
        minSdkVersion 11
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
		//multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }
    buildTypes {

        def buildName = { String buildType ->
            applicationVariants.all { varient ->
                varient.outputs.each { output ->
                    def buildFileName = output.outputFile.name
                    buildFileName = buildFileName.replace("app-", "$project.ext.appName" + '-')
                    output.outputFile = new File(output.outputFile.parent, buildFileName)
                }
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			buildName('release')
		}
		debug {
			debuggable = true
			buildName('debug')
		}
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE'

        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE'

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'

        exclude 'META-INF/ASL2.0'
    }
}

// -------------------- Code quality plugins ---------------------- //
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.diffplug.gradle.spotless:spotless:1.3.3"
        classpath "gradle.plugin.com.palantir:jacoco-coverage:0.3.0"
    }
}
apply plugin: "com.diffplug.gradle.spotless"
sourceSets {
    main {
        java.srcDir file('src/main/java/src')
    }
    unitTest {
        java.srcDir file('tests/java/')
    }
    automation {
        java.srcDir file('src/androidTest/java/src')
    }
}

spotless {
    java {
        eclipseFormatFile 'eclipse-java-google-style.xml'  // XML file dumped out by the Eclipse formatter
    }
}
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'com.palantir.jacoco-full-report'

jacocoCoverage {
    // Enforce minimum code coverage of 50% for every Java file.
    fileThreshold 0.8
}

//apply plugin: 'findbugs'
//tasks.withType(FindBugs) {
//    reports {
//        xml.enabled = false
//        html.enabled = true
//    }
//}
// ---------------------------------------------------------- //

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.assertj:assertj-core:1.7.1'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    compile 'com.android.support:cardview-v7:23.0.+'
    compile 'com.android.support:recyclerview-v7:23.0.+'

    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'

    //Instrument test cases
    androidTestCompile 'com.android.support:support-annotations:23.2.1'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    // UI testing with Espresso
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.0') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
}

android.testOptions.unitTests.all {
    // configure whether failing tests should fail the build
    ignoreFailures false

    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
}

android {
    lintOptions{
        disable 'MissingTranslation'
    }
}
